name: rhkr8521 CI/CD

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    # 1. Java 17 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # 2-1. application.yml 파일 생성
    - name: Create application.yml
      run: |
        mkdir -p src/main/resources
        echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml

    # 2-2. application-jwt.yml 파일 생성
    - name: Create application-jwt.yml
      run: |
        mkdir -p src/main/resources
        echo "${{ secrets.APPLICATION_JWT_YML }}" > src/main/resources/application-jwt.yml

    # 2-2. application-jwt.yml 파일 생성
    - name: Create application-sms.yml
      run: |
        mkdir -p src/main/resources
        echo "${{ secrets.APPLICATION_SMS_YML }}" > src/main/resources/application-sms.yml
        
    # 3. Gradle 설정
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3

    # 4. Spring Boot 애플리케이션 빌드
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
    
    - name: Build with Gradle
      run: ./gradlew clean bootJar

    # 5. Docker 이미지 빌드
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/ancmobility_cicd_action .

    # 6. DockerHub 로그인
    - name: docker login
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # 7. Docker Hub 이미지 푸시
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/ancmobility_cicd_action

# 위 과정에서 푸시한 이미지를 ec2에서 풀받아서 실행시키는 과정 
  run-docker-image-on-ec2:
    # build-docker-image (위)과정이 완료되어야 실행됩니다.
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      # 1. 최신 이미지를 풀받습니다
      - name: docker pull
        run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/ancmobility_cicd_action
      
      # 2. 기존 컨테이너가 있으면 강제로 삭제(없으면 무시)
      - name: Remove existing container if any
        run: docker rm -f ancmobility 2>/dev/null || true

      # 3. 최신 이미지를 컨테이너화하여 실행시킵니다
      - name: docker run new container
        run: docker run --add-host=host.docker.internal:host-gateway --name ancmobility --rm -d -p 8080:8080 -v /home/rhkr8521/images:/app/images ${{ secrets.DOCKERHUB_USERNAME }}/ancmobility_cicd_action

      # 4. 미사용 이미지를 정리합니다
      - name: delete old docker image
        run: docker system prune -f
